"","SentenceID","SentenceText","Response.median","Technique"
"2","177","Don't mix <code>var</code> and <code>let</code>/<code>const</code> - if you're using ES6, which you should be, always use <code>const</code>, except when you need to reassign, in which case use <code>let</code>.",3,1
"3","178","Next we add custom getter and setter for public property which checks each it is invoked if <code>_isPlaying</code> is null.",3,1
"4","179","And if so it returns your default value.",3,1
"7","189","Another thing to notice, is that <code>require</code> is synchronous, so if your JSON is specially large, the first time you instanciate <code>MyClass</code> the event loop will be blocked.",3,1
"8","191","I'd only put <code>require</code> inside the constructor if it was a dynamic dependency, like <code>const wordlist = require(</code>./config/lang/${lang}.json<code>)</code>.",3,1
"11","195","Loop through the object and check to see if car1 exists on the next level down.",3,1
"12","196"," The good news is this will work if given an Array of objects as well instead of a nested Object, but only because we don't care about the keys that hold the objects and only that an object actually has a 'car1' property",3,1
"13","197","Check the result of <code>localeCompare</code> on the property <code>user</code>, if it is either <code>-1</code> or <code>1</code> then return that result.",3,1
"14","198","This works because <code>||</code> will only consider the second component if the <code>localeCompare</code> is zero.",3,1
"15","200","This alternative compares the usernames first <strong>(faster than a precipitated localeCompare execution)</strong>, if they are equal then a common comparison between integers is executed.",3,1
"16","202","Or if you want to get just only one <code>[String: Any]</code> object from response you can write:",3,1
"18","204","You can use session storage if you want the data to be retrieved once <strong>PER SESSION</strong> or local storage if you want to have better control of the data's ""expiration"".",3,1
"19","205","You could put the data in <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"" rel=""nofollow noreferrer""><code>localStorage</code></a> and always check if there is some data there before doing the request.",3,1
"22","209","If your json contains from 0.....N number of persons then <code>BatchUpdate</code> is good solution for you this may reduce your database round trip if you have performance requirement",3,1
"23","210","<a href=""https://jishnutkl.wordpress.com/tag/mysql-bulk-insert-from-c-net/"" rel=""nofollow noreferrer"">Here</a> is good article if you have to use <code>StoedProcedure</code> as insert command.",3,1
"24","211","<code>for item in data:
    if item['hostname'] == 'c.example.com':
       item.update(update)
</code>
This works only if the keys in your <code>update</code> variable overlap with the keys in the item.",3,1
"27","215","and you will also have to add the <code>async</code> keyword to your top function that wraps your code, but if this is a website you'll need to use babel for this to work in all browsers.",3,1
"28","217","You can use this regex if you have to use <code>type=""text""</code>",3,1
"32","223","Then, if the content may have been updated, you should override the previously downloaded files with the new ones, at app launch.",3,1
"34","225","regarding sending app to background , the content won't reset if the app is left working by IOS , but if closed you will get a new launch when you open it again with array content is initiated from the begining",3,1
"38","232","Furthermore, if you want to exploit polymorphic behavior you must use pointers, even if there is no explicit need to cast to derived classes in your code, as far as I can see.",3,1
"39","233","If your code uses the class as a <code>QObject</code> for any reason other than to get meta information, you are almost certainly using it incorrectly if you are trying to store it by value (as explained by G. Giordano in their answer).",3,1
"40","234","Overwrites the existing file if the file exists.",3,1
"41","235","You'll also need to account for the file not yet existing, and if you don't want to wait for locks forever, you need to handle timeouts (meaning you need to use <code>LOCK_NB</code> <em>in a loop</em> and test for the return value to see if the lock was acquired, until a certain amount of time has passed).",3,1
"42","236","In the following context manager, I used the <code>os.open()</code> low-level system call to ensure the file is created when trying to lock it for exclusive access <em>without truncating it if it already exists</em>:",3,1
"43","241","But if you have an <code>include</code> property in your <code>tsconfig.json</code>:",3,1
"44","245","Use <code>.reduce</code> to convert the array into an object, as you're doing, but then you need to <code>.find</code> twice to see if the matching <code>name</code> and then if the matching <code>value</code> object exists.",3,1
"45","251","<code>fetch</code> returns a <code>Promise</code>, so if you want to use slice method, you should use it inside the last <code>.then()</code>, but it would be better if you fetch your data in <code>componentDidMount</code>, save your data in React state, and after that use in <code>render</code> method;",3,1
"46","258","<a href=""https://docs.python.org/3/library/json.html#json.dump"" rel=""nofollow noreferrer""><code>skipkeys</code></a> doesn't do what you might think it does - it instructs the <a href=""https://docs.python.org/3/library/json.html#json.JSONEncoder"" rel=""nofollow noreferrer""><code>json.JSONEncoder</code></a> to skip keys that are not of a <em>basic</em> type, not the values of the keys - i.e. if your had a <code>dict</code> <code>{object(): ""foobar""}</code> it would skip the <code>object()</code> key, whereas without <code>skipkeys</code> set to <code>True</code> it would raise a <code>TypeError</code>.",3,1
"47","262","You shouldn't use <code>contains/1</code> as it will not work the way you might expect it",3,1
"48","263","It will recursively check if all parts are contained.",3,1
"49","264","So not only will it check if the string is contained in the array, but if the string is also a substring",3,1
"1","179","And if so it returns your default value.",3,2
"31","191","I'd only put <code>require</code> inside the constructor if it was a dynamic dependency, like <code>const wordlist = require(</code>./config/lang/${lang}.json<code>)</code>.",3,2
"5","195","Loop through the object and check to see if car1 exists on the next level down.",3,2
"6","197","Check the result of <code>localeCompare</code> on the property <code>user</code>, if it is either <code>-1</code> or <code>1</code> then return that result.",3,2
"81","205","You could put the data in <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"" rel=""nofollow noreferrer""><code>localStorage</code></a> and always check if there is some data there before doing the request.",3,2
"9","209","If your json contains from 0.....N number of persons then <code>BatchUpdate</code> is good solution for you this may reduce your database round trip if you have performance requirement",3,2
"10","211","<code>for item in data:
    if item['hostname'] == 'c.example.com':
       item.update(update)
</code>
This works only if the keys in your <code>update</code> variable overlap with the keys in the item.",3,2
"111","215","and you will also have to add the <code>async</code> keyword to your top function that wraps your code, but if this is a website you'll need to use babel for this to work in all browsers.",3,2
"161","232","Furthermore, if you want to exploit polymorphic behavior you must use pointers, even if there is no explicit need to cast to derived classes in your code, as far as I can see.",3,2
"17","234","Overwrites the existing file if the file exists.",3,2
"181","241","But if you have an <code>include</code> property in your <code>tsconfig.json</code>:",3,2
"191","245","Use <code>.reduce</code> to convert the array into an object, as you're doing, but then you need to <code>.find</code> twice to see if the matching <code>name</code> and then if the matching <code>value</code> object exists.",3,2
"20","264","So not only will it check if the string is contained in the array, but if the string is also a substring",3,2
"110","175","Then your <code>typings.d.ts</code> should be in the <code>src</code> directory as described in <code>include</code> property",3,3
"25","177","Don't mix <code>var</code> and <code>let</code>/<code>const</code> - if you're using ES6, which you should be, always use <code>const</code>, except when you need to reassign, in which case use <code>let</code>.",3,3
"33","180","Otherwise you should consider using another json library like Jackson which as I know supports Kotlin well.",3,3
"410","183","In this case skipping just by type should suffice, but in case the <code>_io</code> key holds some other undesirable data this guarantees it won't be in the final result.",3,3
"51","194","If you do not wanted to create a designated directory (in this case 'public' folder) and put all your top level folders there in order to access it.",3,3
"61","196"," The good news is this will work if given an Array of objects as well instead of a nested Object, but only because we don't care about the keys that hold the objects and only that an object actually has a 'car1' property",3,3
"82","201","You should cast your data to the <code>[[String: Any]]</code> type because you have array in response.",3,3
"101","209","If your json contains from 0.....N number of persons then <code>BatchUpdate</code> is good solution for you this may reduce your database round trip if you have performance requirement",3,3
"131","222","But I think in your case, you should rather investigate why the client is unable to display the <code>errorMsg</code> - this should be the best and most flexible way to go to add additional validations in the future.",3,3
"141","229","The function needs to be of type JsonResult, and the returned value of Json using  JsonRequestBehavior.AllowGet.",3,3
"151","230","If you use console.log the result returned from the mvc controller and view it in the browser inspect you'll see the object with lots of other info and the values you want are in the .data section of the object.",3,3
"171","237","If you want to allow for a timeout, add a <code>try/except</code> block around the <code>with</code> block and catch the <code>Timeout</code> exception; you'll need to decide what should happen then:",3,3
"182","251","<code>fetch</code> returns a <code>Promise</code>, so if you want to use slice method, you should use it inside the last <code>.then()</code>, but it would be better if you fetch your data in <code>componentDidMount</code>, save your data in React state, and after that use in <code>render</code> method;",3,3
"192","252","So, yes, in my opinion, <code>require</code> calls should be at the top, unless you know what you're doing, or you're loading a dynamic dependency.",3,3
"201","255","regarding the download every launch , i recommend having expire or new data flag , you should store them in a file/coreData or any other alternative and , it's best to implement <code>Codable</code> , to read them as <code>Data</code> to objects and vice versa when saving",3,3
"21","262","You shouldn't use <code>contains/1</code> as it will not work the way you might expect it",3,3
"112","234","Overwrites the existing file if the file exists.",3,6
"26","238","This validation error message should be human-readable and it should be okay for the client to display it to the user.",3,6
"35","239","If it returned a falsy value (<strong>i.e.</strong> <code>0</code>) then the value of the other operand of <code>||</code> will be returned (which is sorting by <code>timestamp</code>)",3,6
"411","240","Misuse considerations aside, in order to JSON-ify a <code>QVariant</code> that stores a <code>QObject</code> subclass by value, you can use the <code>QMetaType::create</code> method and pass it the user type id and <code>yourQVariant.constData()</code>.",3,6
"52","241","But if you have an <code>include</code> property in your <code>tsconfig.json</code>:",3,6
"71","243","You are trying to cast to <code>[String: Any]</code>, but you have an array of <code>[String: Any]</code> because your response enclosed in <code>[]</code> brackets.",3,6
"83","245","Use <code>.reduce</code> to convert the array into an object, as you're doing, but then you need to <code>.find</code> twice to see if the matching <code>name</code> and then if the matching <code>value</code> object exists.",3,6
"113","249","Otherwise, it returns the value stored in <code>_isPlaying</code>",3,6
"121","250","If your input field values are numbers, then you can use input type 'number' .",3,6
"132","251","<code>fetch</code> returns a <code>Promise</code>, so if you want to use slice method, you should use it inside the last <code>.then()</code>, but it would be better if you fetch your data in <code>componentDidMount</code>, save your data in React state, and after that use in <code>render</code> method;",3,6
"142","252","So, yes, in my opinion, <code>require</code> calls should be at the top, unless you know what you're doing, or you're loading a dynamic dependency.",3,6
"162","254","Solution :- <em>You must use database</em> , when you save data you do it in db , when you delete data , you delete it from db &amp; when you fetch data then you fetch from db.",3,6
"172","255","regarding the download every launch , i recommend having expire or new data flag , you should store them in a file/coreData or any other alternative and , it's best to implement <code>Codable</code> , to read them as <code>Data</code> to objects and vice versa when saving",3,6
"183","257","and here how you can insert to db :
for ADO.Net : <a href=""https://msdn.microsoft.com/en-us/library/ms233812.aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/ms233812.aspx</a>",3,6
"193","258","<a href=""https://docs.python.org/3/library/json.html#json.dump"" rel=""nofollow noreferrer""><code>skipkeys</code></a> doesn't do what you might think it does - it instructs the <a href=""https://docs.python.org/3/library/json.html#json.JSONEncoder"" rel=""nofollow noreferrer""><code>json.JSONEncoder</code></a> to skip keys that are not of a <em>basic</em> type, not the values of the keys - i.e. if your had a <code>dict</code> <code>{object(): ""foobar""}</code> it would skip the <code>object()</code> key, whereas without <code>skipkeys</code> set to <code>True</code> it would raise a <code>TypeError</code>.",3,6
"202","264","So not only will it check if the string is contained in the array, but if the string is also a substring",3,6
